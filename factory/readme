
Factory Pattern:
We want to the capability of classes chosen at Runtime

Presentation: when a method returns one of the several possible classes that share a commone super class

1) create a new enemy engine in a game
2) Random number generator picks a number assigned to a specific enemy
3) the factory returns the enemy associated with that number

The classs is chosen at run time

So when to use the factory patten:

1) when you don't know ahead of time what class object you need
2) when all the potential classes are in the same subclass hierarchy (ie somewhere they have super class somewhere)
3) To centralize class selection code
4) When you don't want the user to have to know  every subclass
5) to encapsulate object creation (which is always great)

So the example I am chosing this example:

* A client  or a user would request 'hey! make me an enemy shit' :
<factory>
EnemyShipFactory
+makeEnemyShip(String): Ship

*
<abstract>
EnemyShip
-name: String
-amtDamage: Double
+followHeroShip(): void
+displayEnemyShip(): void
+enemyShipShoots(): void
+setDamage(double): void
+getDamage(): double

*
UFOEnemyShip implements EnemyShip<abstract>
+setName(String): void
+getName(): String

*
RocketEnemyShip implements EnemyShip<abstract>
+setName(String):void
+getName(): String

The factory pattern allows you to create objects without specifying the exact class of object that will be created


